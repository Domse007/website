#+title: Publish Script
#+author: Dominik Keller
#+PROPERTY: header-args :tangle ../publish.el
#+auto_tangle: t

* Basic setup

#+begin_src emacs-lisp
(require 'package)

(message "System: %s" (symbol-name system-type))

(when (equal system-type 'windows-nt)
  (setq package-check-signature nil))

(message "%s" (emacs-version))
(message "Emacs was compiled with: %s" system-configuration-options)
(message "Emacs supports %s" system-configuration-features)

(when (version< "28.0.50" emacs-version)
  (setq package-native-compile t
	warning-minimum-level :emergency))

(setq package-archives '(("gnu"   . "https://elpa.gnu.org/packages/")
			 ("melpa" . "https://melpa.org/packages/")))

(message "Working in %s" (expand-file-name default-directory))

(setq package-user-dir (expand-file-name "tmp/" default-directory))

(package-initialize)

(package-refresh-contents)
#+end_src



* Package Setup

#+begin_src emacs-lisp
(defmacro check-package (package)
  `(progn (unless (package-installed-p ',package)
	    (message "Installing %s" (symbol-name ',package))
	    (package-install ',package))
	  (require ',package)))
#+end_src

#+begin_src emacs-lisp
(require 'ox-publish)
(check-package htmlize)
#+end_src

* Variables

#+begin_src emacs-lisp
(defconst site-source-directory (expand-file-name "source/" default-directory))
(defconst site-export-directory (expand-file-name "public/" default-directory))

(defvar website-posts nil
  "All titles of the posts.")
#+end_src

* Advisings

#+begin_src emacs-lisp
(advice-add #'org-html-publish-to-html
	    :around
	    (lambda (orig-fun &rest args)
	      (let* ((plist (nth 0 args))
		     (filename (nth 1 args))
		     (title (org-publish-find-title filename plist))
		     (export-filename
		      (concat (file-name-sans-extension
			       (file-name-nondirectory filename))
			      ".html")))
		(message "Adding %s from %s to posts." title filename)
		(push (cons title export-filename) website-posts))
	      (apply orig-fun args)))
#+end_src

* Building Sitemap definitions

#+begin_src emacs-lisp
(advice-add #'org-html-publish-to-html
	    :around
	    (lambda (orig-fun &rest args)
	      (let* ((plist (nth 0 args))
		     (filename (nth 1 args))
		     (title (org-publish-find-title filename plist))
		     (export-filename
		      (concat (file-name-sans-extension
			       (file-name-nondirectory filename))
			      ".html")))
		(message "Adding %s from %s to posts." title filename)
		(push (cons title export-filename) website-posts))
	      (apply orig-fun args)))
#+end_src

* Building Sitemap 

#+begin_src emacs-lisp
(defun build-entry (a b c)
  "Defines format of sitemap entries."
  (let ((time (format-time-string "%d.%m.%Y" (org-publish-find-date a c)))
	(title (org-publish-find-title a c)))
    (format "- %s: [[file:%s][%s]]" time a title)))
#+end_src

* Variables
#+begin_src emacs-lisp
(setq org-publish-project-alist
      (list (list "site"
		  :recursive nil
		  :base-directory site-source-directory
		  :with-author t
		  :with-creator nil
		  :with-date t
		  :with-toc nil
		  :with-section-numbers nil
		  :time-stamp-file nil
		  :section-numbers nil
		  :auto-sitemap t
		  :sitemap-format-entry #'build-entry
		  :publishing-directory site-export-directory
		  :publishing-function #'org-html-publish-to-html)))

(setq org-confirm-babel-evaluate nil
      org-html-validation-link nil
      org-html-head-include-scripts nil
      org-html-head-include-default-style nil
      org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-html-head
      (concat "<link rel=\"stylesheet\" href=\"style/style.css\" />"
	      "<script type=\"module\" src=\"js/main.js\"></script>"
	      "<link href=\"https://fonts.googleapis.com/css?family=Source Code Pro\" rel=\"stylesheet\">"
	      "<div class=\"hdr\">"
	      "  <h1 id=\"name\"><a id=\"header-title\" href=\"./\">Dominik Keller</a></h1>"
	      "  <div id=\"search-div-wrapper\">"
	      "    <div id=\"search-div\">"
	      "      <input id=\"search\" type=\"text\" placeholder=\"search...\"/>"
	      "      <div id=\"list\"> </div>"
	      "    </div>"
	      "  </div>"
	      "  <div id=\"header-selector\">"
	      "    <a class=\"main-selector\" href=\"/sitemap.html\">Sitemap</a>"
	      "    <a class=\"main-selector\" href=\"/about.html\">About</a>"
	      "    <a class=\"main-selector\" href=\"https://www.github.com/domse007/\">Github</a>"
	      "  </div>"
	      "</div>"))
#+end_src

* Rest

#+begin_src emacs-lisp
(delete-directory site-export-directory t)

(org-publish-remove-all-timestamps)
(org-publish-all t)

(let* ((src (expand-file-name "css/style.css" default-directory))
       (dest (expand-file-name "style/style.css" site-export-directory)))
  (message "Copying from %s to %s" src dest)
  (make-directory (expand-file-name "style/" site-export-directory))
  (copy-file src dest))

(let* ((src (expand-file-name "js/main.js" default-directory))
       (dest (expand-file-name "js/main.js" site-export-directory)))
  (message "Copying from %s to %s" src dest)
  (make-directory (expand-file-name "js/" site-export-directory))
  (copy-file src dest))

(defconst website-version "0.1")
(defconst website-hash
  (string-trim (shell-command-to-string "git rev-parse --short HEAD")))

(defun website-gen-posts-list ()
  (let ((posts (mapcar (lambda (s) (format "\"%s\": \"%s\"" (car s) (cdr s)))
		       website-posts)))
    (format "{ %s }" (string-join posts ", "))))

(defun website-build-constants (file)
  (with-temp-file file
    (insert (format "export const VERSION = %s;\n" website-version)
	      (format "export const COMMIT = \"%s\";\n" website-hash)
	      (format "export const POSTS = %s;\n" (website-gen-posts-list)))))

(website-build-constants (expand-file-name "js/gen.js"
					   site-export-directory))
#+end_src
